// Var, let, const  
// Var 

Чаще всего, при объявлении переменной ей устанавливают стартовое значение при помощи оператора присваивания =. Тип значения может быть абсолютно любым — строка, число, объект, массив и так далее.

// Объявление переменной и присваивание
let string = 'foo'
const array = ['foo', 'bar', 'baz']
var number = 10

// Множественное объявление и присваивание
let firstNumber = 5,
  secondNumber = 10

Затем переменную можно использовать как заменитель значения в коде:

let name = 'Уолтер'
let surname = 'Вайт'
let fullName = name + ' ' + surname

console.log(fullName)
// Уолтер Вайт

Объявление 
Используя ключевое слово let, можно объявить переменную без присвоения ей начального значения. В таком случае она будет равна undefined:

let a
console.log(a)
// undefined

a = 5
console.log(a)
// 5

Скопировать
При помощи const нельзя объявлять переменные без значения:

const a
// SyntaxError: Missing initializer in const declaration

// Правильно
const b = 5

Оба типа переменных имеют блочную область видимости и не становятся частью глобального объекта (window в браузере, global в Node.js). Блочная область видимости не даёт получить значение переменной вне блока, где она была объявлена.

Если объявить переменные внутри блока if, то обращение к ним вне блока будет выбрасывать ошибку:

if (true) {
  let a = 5
  const b = 10

  console.log(a)
  // 5
  console.log(b)
  // 10
}

console.log(a)
// ReferenceError: a is not defined

console.log(b)
// ReferenceError: b is not defined

В то же время можно объявлять переменные с одинаковым именем в разных областях видимости. В этом случае значение будет зависеть от той области видимости, где происходит чтение:

let name = 'Ольга'

if (true) {
  let name = 'Елена'
  console.log(name)
  // Елена
}

console.log(name)
// Ольга

Имена значения в let и const Скопировать ссылку "Смена значения в let и const"
Значение в переменной, созданной через let, можно изменять:

let a = 5
console.log(a)
// 5

a = 10
console.log(a)
// 10

Скопировать
Стартовое значение const изменить нельзя, будь то примитивное значение:

const a = 5
a = 10
// TypeError: Assignment to constant variable

Скопировать
Или ссылка на объект:

const obj = {
  a: 5,
}

obj = {
  a: 10,
}
// TypeError: Assignment to constant variable

Однако объект, хранящийся в const, можно мутировать. Объекты хранятся по ссылке, и изменение объекта не приводит к изменению ссылки на него:

const obj = {
  a: 5,
}

obj.a = 10

console.log(obj)
// { a: 10 }

Скопировать


Типы данных в JavaScript могут быть следующих видов:

 - Числа (number)

 - Строки (string)

 - Логические (boolean)

 - Неопределенные (undefined)

 - Объект (object)

 - Пустой (null)
 
Null и undefined


Ветвление в JavaScript позволяет программе принимать решения на основе условий. Это достигается с помощью оператора if, который проверяет условие и выполняет определенный блок кода, если условие истинно.

Пример:

javascript
var x = 5;

if (x > 10) {
  console.log("x больше 10");
} else if (x < 10) {
  console.log("x меньше 10");
} else {
  console.log("x равно 10");
}

В этом примере переменная x равна 5. Условие x > 10 не выполняется, поэтому программа переходит к следующему условию x < 10, которое истинно. В результате будет выведено сообщение "x меньше 10".

Кроме оператора if, JavaScript также предоставляет операторы else if и else, которые позволяют программе выполнить разные блоки кода в зависимости от условий.

Ветвление также может быть выполнено с помощью оператора switch, который проверяет значение переменной и выполняет соответствующий блок кода.

Пример:

javascript
var color = "red";

switch (color) {
  case "red":
    console.log("Цвет - красный");
    break;
  case "blue":
    console.log("Цвет - синий");
    break;
  default:
    console.log("Цвет не определен");
}


В этом примере переменная color имеет значение "red". Программа проверяет каждый case и выполняет соответствующий блок кода. В результате будет выведено сообщение "Цвет - красный".

Ветвление является важной частью программирования, так как позволяет программам принимать различные решения на основе условий и выполнять соответствующие действия.

Циклы в JavaScript позволяют программе выполнять определенный блок кода несколько раз. Это полезно, когда нужно повторить определенные действия или обработать большой объем данных.

Наиболее распространенными типами циклов в JavaScript являются for, while и do...while.

Цикл for используется, когда заранее известно, сколько раз нужно выполнить блок кода. Он состоит из трех частей: инициализации, условия и обновления.

Пример:

javascript
for (var i = 0; i < 5; i++) {
  console.log(i);
}


В этом примере цикл for будет выполняться пять раз. Переменная i инициализируется со значением 0, условие i < 5 проверяется перед каждой итерацией, и переменная i обновляется на каждой итерации с помощью оператора инкремента i++. В результате будут выведены числа от 0 до 4.

Цикл while выполняет блок кода, пока условие истинно. Условие проверяется перед каждой итерацией.

Пример:

javascript
var i = 0;

while (i < 5) {
  console.log(i);
  i++;
}


В этом примере цикл while будет выполняться до тех пор, пока переменная i меньше 5. Переменная i инициализируется со значением 0, и на каждой итерации она увеличивается на 1 с помощью оператора инкремента i++. В результате будут выведены числа от 0 до 4.

Цикл do...while также выполняет блок кода, пока условие истинно, но условие проверяется после каждой итерации. Это означает, что блок кода будет выполнен хотя бы один раз, даже если условие сразу же ложно.

Пример:

javascript
var i = 0;

do {
  console.log(i);
  i++;
} while (i < 5);


В этом примере цикл do...while будет выполняться до тех пор, пока переменная i меньше 5. Переменная i инициализируется со значением 0, и на каждой итерации она увеличивается на 1 с помощью оператора инкремента i++. В результате будут выведены числа от 0 до 4.

Циклы являются важным инструментом программирования, так как позволяют повторять действия и обрабатывать большие объемы данных. Они также могут быть использованы вместе с ветвлением для создания более сложных программ.

Функции в JavaScript являются основным строительным блоком программы. Они позволяют группировать определенные действия в один блок кода, который может быть вызван и выполнен множество раз.

Функции могут принимать аргументы (параметры), которые передаются в функцию при ее вызове. Аргументы могут быть использованы внутри функции для выполнения определенных операций или для передачи данных.

Пример:

javascript
function greet(name) {
  console.log("Привет, " + name + "!");
}

greet("Анна"); // Выведет "Привет, Анна!"
greet("Петр"); // Выведет "Привет, Петр!"


В этом примере функция greet принимает один аргумент name, который используется для вывода приветствия с именем, переданным в качестве аргумента. Функция вызывается дважды с разными именами, и каждый раз выводится соответствующее приветствие.

Функции также могут возвращать значения с помощью оператора return. Возвращаемое значение может быть использовано в других частях программы.

Пример:

javascript
function add(a, b) {
  return a + b;
}

var result = add(3, 5);
console.log(result); // Выведет 8


В этом примере функция add принимает два аргумента a и b, складывает их и возвращает результат. Функция вызывается с аргументами 3 и 5, и результат (8) сохраняется в переменной result, которая затем выводится в консоль.

Функции могут быть определены в любом месте программы и вызываться из других частей программы. Они позволяют создавать модульный и переиспользуемый код, что делает программу более структурированной и удобной для работы.

Объекты в JavaScript являются основным способом организации и хранения данных. Они представляют собой коллекцию свойств, где каждое свойство имеет имя и значение.

Пример:

javascript
var person = {
  name: "Анна",
  age: 25,
  city: "Москва"
};

console.log(person.name); // Выведет "Анна"
console.log(person.age); // Выведет 25
console.log(person.city); // Выведет "Москва"


В этом примере создается объект person, который содержит свойства name, age и city. Каждое свойство имеет имя и значение, которые можно получить, обратившись к ним через точку (например, person.name).

Свойства объекта могут быть разных типов, включая числа, строки, булевы значения, функции и другие объекты.

Объекты также могут содержать методы - функции, которые являются свойствами объекта. Методы могут использоваться для выполнения определенных действий или операций с данными объекта.

Пример:

javascript
var calculator = {
  add: function(a, b) {
    return a + b;
  },
  subtract: function(a, b) {
    return a - b;
  }
};

console.log(calculator.add(3, 5)); // Выведет 8
console.log(calculator.subtract(10, 7)); // Выведет 3


В этом примере создается объект calculator, который содержит методы add и subtract. Метод add принимает два аргумента и возвращает их сумму, а метод subtract принимает два аргумента и возвращает их разность. Методы вызываются через точку, указывая имя метода и передавая аргументы в скобках.

Объекты в JavaScript позволяют организовывать данные и функциональность в удобной форме, что делает код более структурированным и легко читаемым. Они являются основным строительным блоком для создания сложных программ и веб-приложений.

Строки в JavaScript представляют собой последовательность символов, заключенных в кавычки. Строки могут быть созданы с использованием одинарных ('), двойных (") или обратных (\) кавычек.

Примеры:

javascript
var name = "Анна";
var message = 'Привет, как дела?';
var template = Меня зовут ${name}.;


Строки могут содержать любые символы, включая буквы, цифры, специальные символы и пробелы. В JavaScript строки являются неизменяемыми, что означает, что после создания строки ее нельзя изменить. Однако, можно создать новую строку на основе существующей, используя различные методы строк.

Строки также поддерживают различные операции и методы, позволяющие выполнять различные операции с ними. Например, можно объединять строки с помощью оператора +, получать длину строки с помощью свойства length и использовать методы для поиска и замены подстрок.

Примеры:

javascript
var greeting = "Привет";
var name = "Анна";

var message = greeting + " " + name; // объединение строк

console.log(message); // Выведет "Привет Анна"
console.log(message.length); // Выведет 10

var uppercaseName = name.toUpperCase(); // преобразование строки в верхний регистр

console.log(uppercaseName); // Выведет "АННА"

var replacedMessage = message.replace("Анна", "Мария"); // замена подстроки

console.log(replacedMessage); // Выведет "Привет Мария"


Строки в JavaScript играют важную роль при работе с текстовыми данными и предоставляют множество возможностей для их обработки и манипулирования. Они широко используются при разработке веб-приложений для работы с пользовательским вводом, отображения текстовой информации и выполнения различных операций с текстом.

Дата и время в JavaScript представлены встроенным объектом Date. Этот объект позволяет работать с датами и временем, выполнять различные операции, такие как получение текущей даты и времени, установка даты и времени, а также выполнение арифметических операций с датами.

Примеры:

javascript
var currentDate = new Date(); // получение текущей даты и времени

console.log(currentDate); // Выведет текущую дату и время

var specificDate = new Date(2022, 0, 1); // создание конкретной даты

console.log(specificDate); // Выведет 1 января 2022 года

var year = currentDate.getFullYear(); // получение текущего года

console.log(year); // Выведет текущий год

currentDate.setMonth(11); // установка месяца (январь - 0, декабрь - 11)

console.log(currentDate); // Выведет текущую дату с измененным месяцем

var futureDate = new Date();

futureDate.setDate(futureDate.getDate() + 7); // добавление 7 дней к текущей дате

console.log(futureDate); // Выведет дату через неделю


Объект Date также предоставляет методы для работы с датами и временем, такие как получение отдельных компонентов (год, месяц, день и т.д.), форматирование даты и времени, а также выполнение операций сравнения между датами.

Примеры:

javascript
var currentDate = new Date();

var month = currentDate.getMonth(); // получение текущего месяца (январь - 0, декабрь - 11)

console.log(month); // Выведет текущий месяц

var formattedDate = currentDate.toLocaleDateString(); // форматирование даты в строку

console.log(formattedDate); // Выведет текущую дату в формате "дд.мм.гггг"

var isFuture = futureDate > currentDate; // сравнение дат

console.log(isFuture); // Выведет true, если futureDate больше currentDate


Объект Date в JavaScript предоставляет множество возможностей для работы с датами и временем, что делает его полезным инструментом при разработке приложений, связанных с временными данными, планированием и другими операциями, связанными с датами и временем.


В JavaScript также есть встроенные математические функции, которые позволяют выполнять различные операции с числами. Некоторые из этих функций включают в себя:

- Math.abs(x): возвращает абсолютное значение числа x.
- Math.ceil(x): округляет число x вверх до ближайшего целого.
- Math.floor(x): округляет число x вниз до ближайшего целого.
- Math.round(x): округляет число x до ближайшего целого.
- Math.max(x1, x2, ..., xn): возвращает наибольшее значение из заданных чисел.
- Math.min(x1, x2, ..., xn): возвращает наименьшее значение из заданных чисел.
- Math.random(): возвращает случайное число от 0 (включительно) до 1 (исключительно).
- Math.pow(x, y): возвращает значение x в степени y.
- Math.sqrt(x): возвращает квадратный корень числа x.
- Math.sin(x): возвращает синус угла x (в радианах).
- Math.cos(x): возвращает косинус угла x (в радианах).
- Math.tan(x): возвращает тангенс угла x (в радианах).

Примеры:

javascript
var absoluteValue = Math.abs(-10); // Возвращает 10

var roundedUp = Math.ceil(4.3); // Возвращает 5

var roundedDown = Math.floor(4.7); // Возвращает 4

var rounded = Math.round(4.5); // Возвращает 5

var largestNumber = Math.max(1, 2, 3, 4, 5); // Возвращает 5

var smallestNumber = Math.min(1, 2, 3, 4, 5); // Возвращает 1

var randomValue = Math.random(); // Возвращает случайное число от 0 до 1

var powerResult = Math.pow(2, 3); // Возвращает 8

var squareRoot = Math.sqrt(16); // Возвращает 4

var sineValue = Math.sin(Math.PI / 2); // Возвращает 1

var cosineValue = Math.cos(0); // Возвращает 1

var tangentValue = Math.tan(Math.PI / 4); // Возвращает 1


Математические функции в JavaScript могут быть полезными при выполнении различных операций с числами, таких как округление, нахождение наибольшего или наименьшего значения, генерация случайных чисел и многое другое.

Обработка ошибок в JavaScript позволяет обрабатывать исключительные ситуации, которые могут возникнуть во время выполнения программы. Это может быть полезно, чтобы предотвратить сбои программы и обеспечить более гладкое выполнение кода.

В JavaScript есть несколько способов обработки ошибок:

1. Использование оператора try...catch: Этот оператор позволяет "поймать" и обработать исключение, которое может возникнуть в блоке кода, помещенном внутри оператора try. Если исключение происходит, код в блоке catch выполняется, и в нем можно выполнить необходимые действия для обработки ошибки.

Пример:

javascript
try {
  // Код, который может вызвать ошибку
  var result = 10 / 0; // Деление на ноль вызовет ошибку
} catch (error) {
  // Код для обработки ошибки
  console.log("Произошла ошибка: " + error.message);
}


2. Использование оператора throw: Этот оператор позволяет создавать и выбрасывать свои собственные исключения. Вы можете выбросить исключение с помощью оператора throw, указав объект ошибки или просто строку с сообщением об ошибке.

Пример:

javascript
function divide(a, b) {
  if (b === 0) {
    throw new Error("Деление на ноль недопустимо");
  }
  return a / b;
}

try {
  var result = divide(10, 0);
} catch (error) {
  console.log("Произошла ошибка: " + error.message);
}


3. Использование оператора finally: Этот оператор позволяет выполнить код в блоке finally независимо от того, произошла ошибка или нет. Код в блоке finally будет выполнен после выполнения блока try или блока catch.

Пример:

javascript
try {
  // Код, который может вызвать ошибку
  var result = 10 / 0; // Деление на ноль вызовет ошибку
} catch (error) {
  // Код для обработки ошибки
  console.log("Произошла ошибка: " + error.message);
} finally {
  // Код, который будет выполнен в любом случае
  console.log("Блок finally выполнен");
}


Обработка ошибок в JavaScript позволяет более гибко управлять исключительными ситуациями и предотвращать сбои программы. Она может быть особенно полезной при работе с внешними API или при обработке пользовательского ввода.

В JavaScript регулярные выражения используются для поиска и сопоставления шаблонов в строках. Они могут быть использованы для проверки валидности данных, извлечения информации из строк или замены определенных частей строки.

Для работы с регулярными выражениями в JavaScript используется объект RegExp. Вы можете создать новый объект RegExp с помощью литерала регулярного выражения или с использованием конструктора RegExp.

Примеры:

1. Литерал регулярного выражения:

javascript
var pattern = /abc/; // ищет строку "abc" в любом месте строки


2. Конструктор RegExp:

javascript
var pattern = new RegExp("abc"); // ищет строку "abc" в любом месте строки


Регулярные выражения могут содержать различные модификаторы, которые определяют способ сопоставления шаблона. Некоторые распространенные модификаторы включают:

- i: игнорировать регистр при сопоставлении
- g: выполнить глобальное сопоставление (найти все совпадения, а не только первое)
- m: выполнить многострочное сопоставление

Примеры:

javascript
var pattern = /abc/i; // ищет строку "abc" независимо от регистра
var pattern = /abc/g; // ищет все совпадения строки "abc"
var pattern = /abc/m; // ищет строку "abc" в многострочном тексте


Для выполнения операций со строками с использованием регулярных выражений, JavaScript предоставляет несколько методов, таких как test(), exec(), match(), search(), replace() и split().

Примеры:

javascript
var pattern = /abc/;
var str = "abcdefg";

pattern.test(str); // возвращает true, если найдено совпадение, иначе false
pattern.exec(str); // возвращает массив с информацией о совпадении
str.match(pattern); // возвращает массив со всеми совпадениями
str.search(pattern); // возвращает индекс первого совпадения
str.replace(pattern, "xyz"); // заменяет первое совпадение на "xyz"
str.split(pattern); // разделяет строку на массив подстрок по совпадению


Регулярные выражения могут быть очень мощным инструментом для обработки и манипулирования строк в JavaScript. Они позволяют более гибко и эффективно работать с текстовыми данными.

Для использования регулярных выражений в JavaScript, вы можете использовать методы объекта RegExp или методы строкового объекта.

1. Методы объекта RegExp:

- test(str): проверяет, содержит ли строка str совпадение с регулярным выражением. Возвращает true или false.

Пример:

javascript
var pattern = /abc/;
var str = "abcdefg";

pattern.test(str); // true


- exec(str): ищет совпадение регулярного выражения в строке str. Возвращает массив с информацией о совпадении или null, если совпадение не найдено.

Пример:

javascript
var pattern = /abc/;
var str = "abcdefg";

pattern.exec(str); // ["abc", index: 0, input: "abcdefg", groups: undefined]


2. Методы строкового объекта:

- match(pattern): ищет все совпадения регулярного выражения в строке. Возвращает массив со всеми совпадениями или null, если совпадение не найдено.

Пример:

javascript
var pattern = /abc/;
var str = "abcdefg";

str.match(pattern); // ["abc"]


- search(pattern): ищет первое совпадение регулярного выражения в строке. Возвращает индекс первого совпадения или -1, если совпадение не найдено.

Пример:

javascript
var pattern = /abc/;
var str = "abcdefg";

str.search(pattern); // 0


- replace(pattern, replacement): заменяет совпадение регулярного выражения в строке на указанную замену. Возвращает новую строку с заменой.

Пример:

javascript
var pattern = /abc/;
var str = "abcdefg";

str.replace(pattern, "xyz"); // "xyzdefg"


- split(pattern): разделяет строку на массив подстрок, используя регулярное выражение в качестве разделителя.

Пример:

javascript
var pattern = /abc/;
var str = "abcdefg";

str.split(pattern); // ["", "defg"]


Это лишь некоторые из методов, которые можно использовать для работы с регулярными выражениями в JavaScript. Каждый метод имеет свои особенности и может быть полезен в различных сценариях.

Замыкание в JavaScript - это функция, которая запоминает свою лексическую область видимости, даже если она выполняется вне этой области видимости.

Пример:

javascript
function outerFunction() {
  var outerVariable = 'Hello';

  function innerFunction() {
    console.log(outerVariable);
  }

  return innerFunction;
}

var closure = outerFunction();
closure(); // Выводит 'Hello'


В приведенном выше примере innerFunction является замыканием, потому что она запоминает и может получить доступ к переменной outerVariable, которая находится в области видимости outerFunction. Даже после того, как outerFunction завершает свое выполнение и возвращает innerFunction, замыкание все равно имеет доступ к переменной outerVariable.

Замыкания полезны, когда вам нужно сохранить состояние или данные между вызовами функции. Они также позволяют создавать приватные переменные и методы, которые не могут быть доступны извне функции.

Пример:

javascript
function counter() {
  var count = 0;

  return {
    increment: function() {
      count++;
    },
    decrement: function() {
      count--;
    },
    getCount: function() {
      return count;
    }
  };
}

var myCounter = counter();
myCounter.increment();
myCounter.increment();
console.log(myCounter.getCount()); // Выводит 2


В приведенном выше примере counter возвращает объект с тремя методами: increment, decrement и getCount. Каждый метод имеет доступ к переменной count, которая является приватной и не может быть изменена извне объекта.


теперь по этому

1.4 Простейшие операции
1.5 Ветвление
1.6 Циклы
2.1 Функции
2.2 Объекты
2.3 Строки
2.5 дата и время
2.6 Математические функции
3.1 Обработка ошибок
3.2 Ведение в регулярные выражения
3.3 Использование регулярных выражений
3.4 Замыкания



