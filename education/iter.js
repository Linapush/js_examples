// Суть итеративного процесса — вычисление с фиксированным количеством состояний.

// const factorial = (n) => {
//   const iter = (counter, acc) => {
//     if (counter === 1) {
//       return acc;
//     }
//     return iter(counter - 1, counter * acc);
//   };

//   return iter(n, 1);
// };

// Идея:

// Считаем от n до 1
// Берем число из предыдущего шага
// Умножаем это число на текущее число
// Передаем его в новый шаг
// Когда counter достигает 1, число передаётся из предыдущего шага в ответ

// 1 - определить начальное состояние (return iter(n, 1))
// 2 - проверить базовый случай
// 3 - определить новое состояние
// 4 - повторить шаг 2

// В итоге
// рекурсия содержит сама себя в своем описании
// Реккурсивный процесс - процесс вычисления с отложенными вычислениями
// Итеративный процесс - процесс вычисления, когда состояние может быть описано фиксированным количествои значений

// циклы

// while (condition) {
//   // тело цикла
// }

let i = 0;
while (i < 10) {
  console.log(i);
  i++;
}

console.log("");

//
let i2 = 3;
while (i2 != 0) { // когда i будет равно 0, условие станет ложным, и цикл остановится
  console.log( i2 );
  i2--;
}

console.log("");

// do while
// do {
//   // тело цикла
// } while (condition);

let i5 = 0;
do {
  console.log( i5 );
  i5++;
} while (i5 < 3);

console.log("");

// в 1 строку
let i3 = 3;
while (i3) console.log(i3--);
// цикл выводит i до тех пор, пока i < 10, начиная с 0

// for
// for (начало; условие; шаг) {
//   // ... тело цикла ...
// }

console.log("");

for (let i4 = 0; i4 < 4; i4++) {
  console.log(i4)
}

// часть		
// начало	let i = 0	Выполняется один раз при входе в цикл
// условие	i < 3	Проверяется перед каждой итерацией цикла.
// Если оно вычислится в false, цикл остановится.
// тело	alert(i)	Выполняется снова и снова, пока условие вычисляется в true.
// шаг	i++	Выполняется после тела цикла на каждой итерации перед проверкой условия.

// for in



